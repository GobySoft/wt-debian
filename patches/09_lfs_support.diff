#! /bin/sh /usr/share/dpatch/dpatch-run
## 09_lfs_support.dpatch by Pau Garcia i Quiles <pgquiles@elpauer.org>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: Check for large-file support and enable it when available

@DPATCH@

Index: wt-3.3.12/cmake/CheckLargeFileSupport.cmake
===================================================================
--- /dev/null
+++ wt-3.3.12/cmake/CheckLargeFileSupport.cmake
@@ -0,0 +1,62 @@
+# - Define macro to check large file support
+#
+#  check_large_file_support()
+#
+#  This macro sets the following variables:
+#  _LARGE_FILES
+#  _LARGEFILE_SOURCE
+#  _FILE_OFFSET_BITS 64  
+#
+#  However, it is YOUR job to make sure these defines are set in a cmakedefine so they
+#  end up in a config.h file that is included in your source if necessary!
+
+get_filename_component(_selfdir_CheckLargeFileSupport "${CMAKE_CURRENT_LIST_FILE}" PATH)
+
+macro(CHECK_LARGE_FILE_SUPPORT)
+        # On most platforms it is probably overkill to first test the flags for 64-bit off_t,
+        # and then separately fseeko. However, in the future we might have 128-bit filesystems
+        # (ZFS), so it might be dangerous to indiscriminately set e.g. _FILE_OFFSET_BITS=64.
+
+        message(STATUS "Checking for 64-bit off_t")
+
+	# First check without any special flags
+        try_compile(FILE64_OK "${CMAKE_BINARY_DIR}"    
+                    "${_selfdir_CheckLargeFileSupport}/TestFileOffsetBits.c"
+                      COMPILE_DEFINITIONS "-Werror")
+        if(FILE64_OK)
+	    message(STATUS "Checking for 64-bit off_t - present")			
+      	endif(FILE64_OK)
+
+        if(NOT FILE64_OK)	
+	    # Test with _FILE_OFFSET_BITS=64
+            try_compile(FILE64_OK "${CMAKE_BINARY_DIR}"
+                        "${_selfdir_CheckLargeFileSupport}/TestFileOffsetBits.c"
+                        COMPILE_DEFINITIONS "-D_FILE_OFFSET_BITS=64" )
+            if(FILE64_OK)
+	        message(STATUS "Checking for 64-bit off_t - present with _FILE_OFFSET_BITS=64")
+                set(_FILE_OFFSET_BITS 64)
+            endif(FILE64_OK)
+        endif(NOT FILE64_OK)    
+
+        if(NOT FILE64_OK)
+            # Test with _LARGE_FILES
+            try_compile(FILE64_OK "${CMAKE_BINARY_DIR}"
+                        "${_selfdir_CheckLargeFileSupport}/TestFileOffsetBits.c"
+                        COMPILE_DEFINITIONS "-D_LARGE_FILES" )
+            if(FILE64_OK)
+                message(STATUS "Checking for 64-bit off_t - present with _LARGE_FILES")
+                set(_LARGE_FILES 1)
+            endif(FILE64_OK)
+        endif(NOT FILE64_OK)
+	
+        if(NOT FILE64_OK)
+            # Test with _LARGEFILE_SOURCE
+            try_compile(FILE64_OK "${CMAKE_BINARY_DIR}"
+                        "${_selfdir_CheckLargeFileSupport}/TestFileOffsetBits.c"
+                        COMPILE_DEFINITIONS "-D_LARGEFILE_SOURCE" )
+            if(FILE64_OK)
+                message(STATUS "Checking for 64-bit off_t - present with _LARGEFILE_SOURCE")
+      		      	       set(_LARGEFILE_SOURCE 1)
+            endif(FILE64_OK)
+        endif(NOT FILE64_OK)
+endmacro(CHECK_LARGE_FILE_SUPPORT)
Index: wt-3.3.12/cmake/TestFileOffsetBits.c
===================================================================
--- /dev/null
+++ wt-3.3.12/cmake/TestFileOffsetBits.c
@@ -0,0 +1,10 @@
+#include <sys/types.h>
+
+int main(int argc, char **argv)
+{
+  /* Cause a compile-time error if off_t is smaller than 64 bits */
+#define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))
+  int off_t_is_large[ (LARGE_OFF_T % 2147483629 == 721 && LARGE_OFF_T % 2147483647 == 1) ? 1 : -1 ];  
+  return 0;
+}
+
Index: wt-3.3.12/CMakeLists.txt
===================================================================
--- wt-3.3.12.orig/CMakeLists.txt
+++ wt-3.3.12/CMakeLists.txt
@@ -365,6 +365,7 @@ INCLUDE(cmake/WtFindHaru.txt)
 INCLUDE(cmake/WtFindGm.txt)
 INCLUDE(cmake/WtFindGL.txt)
 INCLUDE(cmake/WtFindSkia.txt)
+INCLUDE(cmake/CheckLargeFileSupport.cmake)
 
 IF (ENABLE_UNWIND)
   INCLUDE(cmake/WtFindUnwind.txt)
@@ -659,6 +660,21 @@ IF(ENABLE_UNWIND AND UNWIND_FOUND)
   SET(HAVE_UNWIND ON)
 ENDIF(ENABLE_UNWIND AND UNWIND_FOUND)
 
+check_large_file_support()
+
+if(_FILE_OFFSET_BITS)
+  add_definitions(-D_FILE_OFFSET_BITS=${_FILE_OFFSET_BITS})
+endif(_FILE_OFFSET_BITS)
+
+if(_LARGE_FILES)
+  add_definitions(-D_LARGE_FILES=${_LARGE_FILES})
+endif(_LARGE_FILES)
+
+if(_LARGEFILE_SOURCE)
+  add_definitions(-D_LARGEFILE_SOURCE=${_LARGEFILE_SOURCE})
+endif(_LARGEFILE_SOURCE)
+
+
 # Compile time constants & make sure our build finds it
 FILE(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/Wt)
 SET(WCONFIG_H_PATH ${CMAKE_CURRENT_BINARY_DIR}/Wt/WConfig.h)
Index: wt-3.3.12/WConfig.h.in
===================================================================
--- wt-3.3.12.orig/WConfig.h.in
+++ wt-3.3.12/WConfig.h.in
@@ -45,6 +45,15 @@
 #cmakedefine WT_USE_BOOST_SIGNALS
 #cmakedefine WT_USE_BOOST_SIGNALS2
 
+/* Number of bits in a file offset, on hosts where this is settable. */
+#cmakedefine _FILE_OFFSET_BITS @_FILE_OFFSET_BITS@
+
+/* Define to 1 to make fseeko visible on some hosts (e.g. glibc 2.2). */
+#cmakedefine _LARGEFILE_SOURCE @_LARGEFILE_SOURCE@
+
+/* Define for large files, on AIX-style hosts. */
+#cmakedefine _LARGE_FILES @_LARGE_FILES@
+
 // our win32: WIN32 (gcc) or _WIN32 (MSC)
 #if defined(WIN32) || defined(_WIN32)
 #define WT_WIN32 1
