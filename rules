#!/usr/bin/make -f
# -*- makefile -*-
# debian.rules file for Wt
# Copyright 2008-2016 by Pau Garcia i Quiles <pgquiles@elpauer.org>
# Copyright 2018 by Toby Schneider <toby@gobysoft.org>
# Based on the dh-make-generated rules file

include /usr/share/dpatch/dpatch.make

version=3.3.11
major=3

### Hardening

export DEB_BUILD_MAINT_OPTIONS = hardening=+all

# CMake doesn't use CPPFLAGS, pass them to CFLAGS/CXXFLAGS to enable the
# missing (hardening) flags. dpkg_buildflags is necessary because $(shell ..)
# doesn't use local environment variables. (bug #665324)
dpkg_buildflags = DEB_BUILD_MAINT_OPTIONS=$(DEB_BUILD_MAINT_OPTIONS) dpkg-buildflags
export DEB_CFLAGS_MAINT_APPEND   := -pipe -Wall $(shell $(dpkg_buildflags) --get CPPFLAGS)
export DEB_CXXFLAGS_MAINT_APPEND := -pipe -Wall $(shell $(dpkg_buildflags) --get CPPFLAGS)
export DEB_LDFLAGS_MAINT_APPEND  := -Wl,-z,defs -Wl,--as-needed


DEB_HOST_MULTIARCH ?= $(shell dpkg-architecture -qDEB_HOST_MULTIARCH)


# Workaround needed due to bug in CMake
# http://wiki.debian.org/Hardening
#CPPFLAGS:=$(shell dpkg-buildflags --get CPPFLAGS)
#CFLAGS:=$(shell dpkg-buildflags --get CFLAGS) $(CPPFLAGS)
#CXXFLAGS:=$(shell dpkg-buildflags --get CXXFLAGS) $(CPPFLAGS)
#LDFLAGS:=$(shell dpkg-buildflags --get LDFLAGS)

DPKG_EXPORT_BUILDFLAGS = 1
include /usr/share/dpkg/buildflags.mk
#CFLAGS+=$(CPPFLAGS)
#CXXFLAGS+=$(CPPFLAGS)
#LDFLAGS+=$(LDFLAGS)

### End hardening


### JavaScript minifier

# Use UglifyJS (what upstream uses) where available,
# yui-compressor (what upstream used in the past) where there is no UglifyJS

MINIFIER=$(shell which uglifyjs)
ifneq ($(MINIFIER),)
  IS_UGLIFY2=$(shell grep -E '"version": "2\.[0-9]+\.[0-9]+"' /usr/lib/nodejs/uglify-js/package.json)
  ifeq ($(IS_UGLIFY2),)
    # Legacy: uglifyjs < 2.x
    MINIFIER_FLAGS=-c --no-seqs -nc    
  else
    # uglifyjs >= 2.x
    MINIFIER_FLAGS=-c sequences=false
  endif
else
  MINIFIER=/usr/bin/yui-compressor
  MINIFIER_FLAGS=--nomunge
endif

### End JavaScript minifier


### Parallel build
ifneq (,$(filter noopt,$(DEB_BUILD_OPTIONS)))
  CFLAGS += -O0
else
  CFLAGS += -O2
endif

ifneq (,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
  NUMJOBS = $(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
  MAKEFLAGS += -j$(NUMJOBS)
endif
### End parallel build

CMAKEVERSION:=$(shell cmake --version | grep -o -P \(\\d\\.\\d\) | tr -d '\n')

build-static/Makefile: build-resources patch-stamp
	dh_testdir
	mkdir -p build-static
	cd build-static && cmake .. -DCMAKE_INSTALL_PREFIX:PATH=/usr \
                                -DCMAKE_C_FLAGS="$(CFLAGS)" -DCMAKE_CXX_FLAGS="$(CXXFLAGS)" \
                                -DSTATIC_LIBRARY_FLAGS="-Wl,--no-undefined -Wl,--as-needed -Wl,-z,relro" \
                                -DCMAKE_MODULE_LINKER_FLAGS="-Wl,--no-undefined -Wl,--as-needed -Wl,-z,relro" \
                                -DDEBUG_LIB_POSTFIX="" \
				-DWT_CPP_11_MODE=-std=c++0x \
				-DUSE_SYSTEM_SQLITE3:BOOL=ON \
				-DUSE_SYSTEM_GLEW:BOOL=ON \
				-DCONFIGDIR:PATH=/etc/wt/ \
				-DBUILD_TESTS:BOOL=OFF \
				-DCMAKE_VERBOSE_MAKEFILE:BOOL=1 \
				-DCONNECTOR_FCGI:BOOL=ON \
				-DSHARED_LIBS:BOOL=OFF \
				-DMULTI_THREADED:BOOL=ON \
				-DWT_CMAKE_FINDER_INSTALL_DIR:PATH=/share/cmake-$(CMAKEVERSION)/Modules \
				-DWT_WRASTERIMAGE_IMPLEMENTATION=GraphicsMagick \
				-DCMAKE_BUILD_TYPE:STRING=Release \
				-DCMAKE_SKIP_RPATH:BOOL=ON \
				-DBUILD_EXAMPLES:BOOL=OFF \
				-DENABLE_EXT:BOOL=ON \
				-DENABLE_LIBWTTEST:BOOL=ON \
				-DENABLE_LIBWTDBO:BOOL=ON \
				-DINSTALL_EXAMPLES:BOOL=OFF \
				-DINSTALL_FINDWT_CMAKE_FILE:BOOL=OFF \
				-DWEBUSER:STRING=www-data \
				-DWEBGROUP:STRING=www-data

build-shared/Makefile: build-resources patch-stamp
	mkdir -p build-shared
	cd build-shared && cmake .. -DCMAKE_INSTALL_PREFIX:PATH=/usr \
                                -DCMAKE_C_FLAGS="$(CFLAGS)" -DCMAKE_CXX_FLAGS="$(CXXFLAGS)" \
                                -DCMAKE_SHARED_LINKER_FLAGS="-Wl,--no-undefined -Wl,--as-needed -Wl,-z,relro" \
                                -DCMAKE_MODULE_LINKER_FLAGS="-Wl,--no-undefined -Wl,--as-needed -Wl,-z,relro" \
                                -DCMAKE_EXE_LINKER_FLAGS="-Wl,--no-undefined -Wl,--as-needed -Wl,-z,relro" \
                                -DDEBUG_LIB_POSTFIX="" \
				-DWT_CPP_11_MODE=-std=c++0x \
				-DUSE_SYSTEM_SQLITE3:BOOL=ON \
				-DUSE_SYSTEM_GLEW:BOOL=ON \
				-DCONFIGDIR:PATH=/etc/wt/ \
				-DBUILD_TESTS:BOOL=OFF \
				-DCMAKE_VERBOSE_MAKEFILE:BOOL=1 \
				-DCONNECTOR_FCGI:BOOL=ON \
				-DSHARED_LIBS:BOOL=ON \
				-DMULTI_THREADED:BOOL=ON \
				-DWT_CMAKE_FINDER_INSTALL_DIR:PATH=/share/cmake-$(CMAKEVERSION)/Modules \
				-DWT_WRASTERIMAGE_IMPLEMENTATION=GraphicsMagick \
				-DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo \
				-DCMAKE_SKIP_RPATH:BOOL=ON \
				-DBUILD_EXAMPLES:BOOL=ON \
				-DENABLE_EXT:BOOL=ON \
				-DENABLE_LIBWTTEST:BOOL=ON \
				-DENABLE_LIBWTDBO:BOOL=ON \
				-DINSTALL_EXAMPLES:BOOL=ON \
				-DINSTALL_FINDWT_CMAKE_FILE:BOOL=OFF \
				-DFORCE_INSTALL_WTCONFIG:BOOL=ON \
				-DWEBUSER:STRING=www-data \
				-DWEBGROUP:STRING=www-data

build: build-stamp

build-arch: build

build-indep: build

build-stamp: build-static/Makefile build-shared/Makefile
	dh_testdir
	cd build-static && $(MAKE) $(MAKEFLAGS)
	cd build-shared && $(MAKE) $(MAKEFLAGS) && $(MAKE) $(MAKEFLAGS) doc

	# Delete Doxygen helper files
	find . -name *.map -delete
	find . -name *.md5 -delete

	touch $@

build-resources:
	cp /usr/share/asciidoc/javascripts/asciidoc.js doc/tutorial/
	(cd src/js; for I in *.js; do $(MINIFIER) $(MINIFIER_FLAGS) $$I > `basename $$I .js`.min.js; done)
	cd src/web/skeleton && $(MINIFIER) $(MINIFIER_FLAGS) Boot.js > Boot.min.js
	cd src/web/skeleton && $(MINIFIER) $(MINIFIER_FLAGS) Wt.js > Wt.min.js
	#mtasc -main -swf resources/WtSoundManager.swf \
	#	src/flash/WtSoundManager.as -version 8 -header 16:16:30
#	as3compile src/flash/WtSoundManager.as --width 16 --height 16 \
#		--rate 30 --flashversion 9 -M WtSound \
#		-o resources/WtSoundManager.swf
	ln -s /usr/share/javascript/jquery/jquery.min.js src/web/skeleton/
	mkdir -p resources/jPlayer
	ln -s /usr/share/javascript/jquery/jquery.min.js resources/jPlayer/
	ln -s /usr/share/javascript/jquery-jplayer/Jplayer.swf resources/jPlayer/
	ln -s /usr/share/javascript/jquery-jplayer/jquery.jplayer.min.js resources/jPlayer
	ln -s /usr/share/javascript/jquery-jplayer/skins/blue.monday resources/jPlayer/skin
	ln -s /usr/share/fonts-font-awesome resources/font-awesome
	ln -s /usr/share/tinymce/www resources/tiny_mce
	touch $@

get-orig-source:
	uscan --verbose

clean: unpatch
	rm -rf build-static
	rm -rf build-shared
#	rm -f src/web/skeleton/jquery.min.js
#	rm -rf resources/jPlayer
#	rm -f resources/WtSoundManager.swf
#	rm -rf resources/font-awesome
#	rm -f doc/wt.qch
#	rm -rf doc/html
	dh_clean

install: build
	dh_testdir
	dh_testroot
	dh_prep 
	dh_installdirs

	# Commands to install the package into debian/tmp
	cd build-static && $(MAKE) $(MAKEFLAGS) install DESTDIR=$(CURDIR)/debian/tmp/
	cd build-shared && $(MAKE) $(MAKEFLAGS) install DESTDIR=$(CURDIR)/debian/tmp/

	mkdir -p $(CURDIR)/debian/tmp/usr/share/doc/libwt-doc/
	mkdir -p $(CURDIR)/debian/tmp/usr/share/doc/witty-examples/

	cp -R $(CURDIR)/doc/* $(CURDIR)/debian/tmp/usr/share/doc/libwt-doc/
	mv $(CURDIR)/debian/tmp/usr/share/doc/libwt-doc/examples/html $(CURDIR)/debian/tmp/usr/share/doc/witty-examples/
	rm -rf $(CURDIR)/debian/tmp/usr/share/doc/libwt-doc/examples

	cp -R $(CURDIR)/cmake $(CURDIR)/debian/tmp/usr/lib/Wt/
	cp -R $(CURDIR)/test $(CURDIR)/debian/tmp/usr/lib/Wt/
	chmod -x $(CURDIR)/debian/tmp/usr/lib/Wt/cmake/FindWt.cmake
	chmod -x $(CURDIR)/debian/tmp/usr/lib/Wt/cmake/WtFindFirebirdSql.txt
	chmod -x $(CURDIR)/debian/tmp/usr/lib/Wt/examples/widgetgallery/docroot/pics/sintel_trailer.jpg
	#mv $(CURDIR)/debian/tmp/usr/lib/Wt/examples/widgetgallery/docroot/* $(CURDIR)/debian/tmp/usr/lib/Wt/examples/widgetgallery/
	chmod -x $(CURDIR)/debian/tmp/usr/lib/Wt/examples/feature/video/sintel_trailer.jpg
	chmod -x $(CURDIR)/debian/tmp/usr/lib/Wt/examples/codeview/prettify/prettify.css
	(cd $(CURDIR)/debian/tmp/usr/lib/Wt/examples/; for I in `find . -mindepth 1 -maxdepth 1 -type d`; do (cd $$I; ln -s /usr/share/Wt/resources); done)
	(cd $(CURDIR)/debian/tmp/usr/lib/Wt/examples/feature; for I in `find . -mindepth 1 -maxdepth 1 -type d`; do (cd $$I; ln -s /usr/share/Wt/resources); done)
	(cd $(CURDIR)/debian/tmp/usr/lib/Wt/examples/widgetgallery; rm resources; cd docroot; ln -s /usr/share/Wt/resources)
	rm -f $(CURDIR)/debian/tmp/usr/share/Wt/resources/themes/default/stripes/generate.sh
	rm -f $(CURDIR)/debian/tmp/usr/share/Wt/resources/themes/default/no-stripes/generate.sh
	rm -f $(CURDIR)/debian/tmp/usr/share/Wt/resources/themes/polished/stripes/generate.sh
	rm -f $(CURDIR)/debian/tmp/usr/share/Wt/resources/themes/polished/no-stripes/generate.sh
	rm -f $(CURDIR)/debian/tmp/usr/lib/Wt/examples/run-example.cmake
	rm -f $(CURDIR)/debian/tmp/usr/lib/Wt/examples/run-example.bat
	# chmod 644 debian/tmp/usr/share/Wt/resources/WtSoundManager.swf

#	rm $(CURDIR)/debian/tmp/usr/share/cmake-$(CMAKEVERSION)/Modules/FindWt.cmake

	cp $(CURDIR)/ReleaseNotes.html $(CURDIR)/debian/tmp/usr/share/doc/libwt-doc/

	# Fix examples and tests to make them buildable standalone
	# patch -p1 -d debian/tmp/usr/lib/Wt < debian/patches/05_examples_cmake_dependencies.dpatch
	# patch -p1 -d debian/tmp/usr/lib/Wt < debian/patches/07_tests_cmake_dependencies.dpatch

	rm $(CURDIR)/debian/tmp/usr/lib/Wt/examples/wtwithqt/LICENSE
	rm $(CURDIR)/debian/tmp/usr/lib/Wt/examples/wtwithqt/lib/LICENSE

# Build architecture-independent files here.
binary-indep: install
	dh_testdir -i
	dh_testroot -i
	dh_installchangelogs -i Changelog
	dh_installdocs -i
	dh_installexamples -i
	dh_install -i --sourcedir=debian/tmp/
	dh_install -i --sourcedir=debian/tmp/
	dh_installman -i
	dh_lintian -i
	dh_link -i
	dh_strip -i --dbg-package=libwt-dbg
	dh_compress -i -Xwt.doc -Xauth.doc -Xdbo.doc -XDoxyfile -X.html -X.C -X.h -X.txt -X.map -X.xml -X.js -X.csv -XWQApplication -X.qch -A
	dh_makeshlibs -i -V
	dh_shlibdeps -i -- -S$(CURDIR)/debian/tmp/usr/lib/
	dh_fixperms -i
	dh_installdeb -i
	dh_gencontrol -i
	dh_md5sums -i
	dh_builddeb -i


# Build architecture-dependent files here.
binary-arch: install
	dh_testdir -a
	dh_testroot -a
	dh_installchangelogs -a Changelog
	dh_installdocs -a
	dh_installexamples -a
	dh_install -a --sourcedir=debian/tmp/
	dh_install -a --sourcedir=debian/tmp/
	dh_installman -a
	dh_lintian -a
	dh_link -a
	dh_strip -a --dbg-package=libwt-dbg
	dh_compress -a -Xwt.doc -Xauth.doc -Xdbo.doc -XDoxyfile -X.html -X.C -X.h -X.txt -X.map -X.xml -X.js -X.csv -XWQApplication -X.qch -A
	dh_makeshlibs -a -V
	dh_shlibdeps -a -- -S$(CURDIR)/debian/tmp/usr/lib/
	dh_fixperms -a
	dh_installdeb -a
	dh_gencontrol -a
	dh_md5sums -a
	dh_builddeb -a

binary: binary-indep binary-arch
.PHONY: build clean binary-indep binary-arch binary install configure
